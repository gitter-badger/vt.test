<?xml version="1.0" encoding="UTF-8"?>
<project name="Vliegtickets" default="build" basedir="." description="This is a buildfile for Vliegtickest project.">
    <!-- Required properties -->
    <property name="base.dir" value="." override="true"/>
    <property name="vendors.dir" value="${base.dir}/../library/Symfony/vendor" />
    <property name="api.dir" value="${vendors.dir}/../services" />
    <property name="source.dir" value="${base.dir}/src" />
    <property name="build.dir" value="${base.dir}/app/build" />

    <!-- Filesets -->
    <fileset id="sourcecode" dir="${source.dir}">
        <include name="*.php"/>
        <include name="**/*.php"/>
        <exclude name="Tests/"/>
    </fileset>

    <fileset id="apicode" dir="${api.dir}">
        <include name="*.php"/>
        <include name="**/*.php"/>
        <exclude name="Tests/"/>
    </fileset>

    <!-- ============================================  -->
    <!-- (DEFAULT) Target: prepare                     -->
    <!-- ============================================  -->
    <target name="prepare" description="Cleanup build artifacts and prepare for build">
        <echo msg="Making directory build..." />

        <delete dir="${build.dir}/coverage" includeemptydirs="true" verbose="false"/>
        <delete dir="${build.dir}/reports" includeemptydirs="true" verbose="false"/>
        <delete dir="${build.dir}/pdepend" includeemptydirs="true" verbose="false"/>
        <delete dir="${build.dir}/docs" includeemptydirs="true" verbose="false"/>

        <mkdir dir="${build.dir}/coverage"/>
        <mkdir dir="${build.dir}/reports"/>
        <mkdir dir="${build.dir}/pdepend"/>
        <mkdir dir="${build.dir}/docs"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: lint                                  -->
    <!-- ============================================  -->
    <target name="lint" description="Check syntax errors of source">
        <phplint>
            <fileset refid="sourcecode" />
            <fileset refid="apicode" />
        </phplint>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHPMD (Project Mess Detector)         -->
    <!-- ============================================  -->
    <target name="phpmd" description="Generate pmd.xml using PHPMD">
        <phpmd>
            <fileset refid="sourcecode" />
            <fileset refid="apicode" />
            <formatter type="xml" outfile="${build.dir}/reports/pmd.xml"/>
        </phpmd>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHPCPD (Copy/Paste Detector)          -->
    <!-- ============================================  -->
    <target name="phpcpd" description="Copy/Paste Detection">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${build.dir}/reports/cpd.xml" />

            <arg path="${source.dir}" />
        </exec>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHP Depend                            -->
    <!-- ============================================  -->
    <target name="pdepend" description="Calculate dependencies of the code base">
        <phpdepend>
            <fileset refid="sourcecode" />
            <fileset refid="apicode" />
            <logger type="jdepend-xml" outfile="${build.dir}/reports/jdepend.xml"/>
            <logger type="jdepend-chart" outfile="${build.dir}/pdepend/dependencies.svg"/>
            <logger type="overview-pyramid" outfile="${build.dir}/pdepend/overview-pyramid.svg"/>
        </phpdepend>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHPCS (PHP Code Sniffer)              -->
    <!-- ============================================  -->
    <target name="phpcs"
        description="Provides full CodeSniffer test to Symfony2 standards results.">
        <phpcodesniffer standard="Symfony2" showSniffs="true" showWarnings="true">
            <fileset refid="sourcecode" />
            <fileset refid="apicode" />

            <formatter type="checkstyle" outfile="${build.dir}/reports/phpcs-checkstyle.xml"/>
            <formatter type="full" outfile="${build.dir}/reports/phpcs-all.txt"/>
            <formatter type="summary" outfile="${build.dir}/reports/phpcs-summary.txt"/>

            <formatter type="summary" usefile="false"  />
            <formatter type="full" outfile="${build.dir}/reports/standards-check.xml" />
        </phpcodesniffer>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHPDoc                                -->
    <!-- ============================================  -->
    <target name="phpdoc" description="Generate API documentation using PHPDocumentor">
        <phpdoc2 title="Vliegtickets API Documentation"
            destdir="${build.dir}/docs"
            template="responsive">
            <fileset refid="sourcecode" />
            <fileset refid="apicode" />
        </phpdoc2>
    </target>

    <!-- ============================================  -->
    <!-- Target: Fetch tools                           -->
    <!-- ============================================  -->
    <target name="fetch" description="Fetch tools">
        <echo msg="Fetching Composer"/>
        <exec command="curl -sS https://getcomposer.org/installer | php"
            checkreturn="true"
            passthru="true"
            level="verbose"/>

        <echo msg="Fetching PHPLoc"/>
        <exec command="wget https://phar.phpunit.de/phploc.phar"
            checkreturn="true"
            passthru="true"
            level="verbose"/>

        <echo msg="Fetching SensioLabs Security Checker"/>
        <exec command="wget -c http://get.sensiolabs.org/security-checker.phar"
            checkreturn="true"
            passthru="true"
            level="verbose"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: Fetch Symfony vendors                 -->
    <!-- ============================================  -->
    <target name="vendors" depends="fetch" description="Update vendors">
        <exec command="php composer.phar update" checkreturn="true" passthru="true" level="verbose">
            <arg value="--optimize-autoloader" />
        </exec>
    </target>

    <!-- ============================================  -->
    <!-- Target: Unit test                             -->
    <!-- ============================================  -->
    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" passthru="true" checkreturn="true">
            <arg value="-c" />
            <arg path="${base.dir}/app/phpunit.xml.dist" />
        </exec>
    </target>

    <!-- ============================================  -->
    <!-- Target: PHPLoc (PHP Lines of Code)            -->
    <!-- ============================================  -->
    <target name="phploc" description="Generate phploc.csv">
        <exec command="php phploc.phar --log-csv ${build.dir}/reports/phploc.csv ${source.dir} "
            checkreturn="true"
            passthru="true"
            level="verbose" />
    </target>

    <!-- ============================================  -->
    <!-- Target: Security Check                        -->
    <!-- ============================================  -->
    <target name="scheck" description="SensioLabs Security Checker">
        <exec command="php security-checker.phar security:check composer.lock"
            checkreturn="true"
            passthru="true"
            level="verbose"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: generate translations index           -->
    <!-- ============================================  -->
    <target name="translate" description="Collect project translations">
        <exec command="php app/console cache:clear"
            checkreturn="true"
            passthru="true"
            level="verbose"
            description="Clear cache so that Symfony can discover the new translation resources" />
        <exec command="php app/console debug:translation nl IndexBundle"
            checkreturn="true"
            passthru="true"
            level="verbose"
            description="Check missing translations" />
        <exec command="php app/console translation:update --force --output-format=xlf nl IndexBundle"
            checkreturn="true"
            passthru="true"
            level="verbose"
            description="Generate translations index for bundles" />
        <exec command="php app/console bazinga:js-translation:dump web/assets/js"
            checkreturn="true"
            passthru="true"
            level="verbose"
            description="Dump the translation files to be used on client side" />
    </target>

    <!-- ============================================  -->
    <!-- (DEFAULT) Target: main                        -->
    <!-- ============================================  -->
    <target name="build" description="Start analyzing our application">
        <echo msg="Start Build" />

        <phingCall target="prepare" />
        <phingCall target="lint" />
        <phingCall target="phpmd" />
        <phingCall target="phpcpd" />
        <phingCall target="pdepend" />
        <phingCall target="phpcs" />
        <phingCall target="phpdoc" />
        <phingCall target="vendors" />
        <phingCall target="phpunit" />
        <phingCall target="phploc" />
        <phingCall target="scheck" />
        <phingCall target="translate" />

        <echo msg="Finished Build" />
    </target>
</project>
